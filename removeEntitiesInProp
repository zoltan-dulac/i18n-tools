#!/bin/bash

########################################################
# removeEntitiesInProp - a BASH script that will take
# a *.properites file and convert all the property 
# values to UTF-8.  This conversion applies to numeric
# entities, named entities and '\u' escaped Unicode 
# characters.
#
# This also cleans up the formatting of the property
# name and value by putting one (and only one) space
# before and after the = symbol separating the two.
#
# Dependencies:
# - ascii2uni/uni2ascii 
#   http://billposer.org/Software/uni2ascii.html
#
# This script has been tested under OSX.  It *should*
# work under Linux and Microsoft Windows using Cygwin
# (please email me at zoltan.dulac@gmail.com if there
# are any issues).
#
# Latest version can be grabbed from github at:
# https://github.com/zoltan-dulac/i18n-tools

# Licence: MIT 
# https://opensource.org/licenses/MIT
########################################################

if [ "$#" = "0" ]
then
	IN="/dev/stdin"
	OUT="/dev/stdout"
elif [ "$#" = "1" ]
then
	IN="$1"
	OUT="/dev/stdout"
elif [ "$#" = "2" ]
then
	IN="$1"
	OUT="$2"
else
	echo "
	
Usage: $0 <input-prop-file> (<optional-output-prop-file>)

This command will take a .properties file as inputa
and remove all the HTML entities.	If the symbols <, &
or > appear, the use will be asked if it should be "entified"
or not

" 1>&2
exit 1

fi

if [ "$IN" != "/dev/null" ]
then
	NUMLINES=`wc -l $IN | awk '{print $1}'`
else
	NUMLINES="unknown"
fi


cat $IN | (
  LINENUM="0"
	read -r LINE 
	while [ "$?" = "0" ]
	do
		LINENUM=`expr $LINENUM + 1`
		
		#.. check for a comment block
		echo $LINE | egrep "^#" > /dev/null
		IS_COMMENT="$?"
		
		#.. check for a blank line
		echo $LINE | egrep "^\s*$" > /dev/null
		IS_BLANK_LINE="$?"
		
		if [ "$IS_COMMENT" = "0" ]
		then
			echo "$LINE" > $OUT
		elif [ "$IS_BLANK_LINE" = "0" ]
		then
			echo > $OUT
		else
			NAME=`echo $LINE | awk -F"=" '{print $1}'`
		
			#.. idea from http://stackoverflow.com/questions/19154996/awk-split-only-by-first-occurrence
			VAL=`printf '%s\n' "$LINE" | gawk -F"=" '{ st = index($0,"=");print substr($0,st+1)}'`
			
			
			VAL=`echo "$VAL" | 
				
				#.. we need to ensure \u escaped codes only have four digits, so let's surround them with tildes.
				sed 's/\(\\\u[0-9a-f][0-9a-f][0-9a-f][0-9a-f]\)/~\1~/g' |
				
				#.. we need to ensure &amp;, &gt; and &lt; are *not* converted.
				sed "s/&\(amp\);/\&#z38;/g;
						 s/&\(lt\);/\&#z60;/g;
						 s/&\(gt\);/\&#z62;/g" 
				
			`
		
			#.. do the conversion.
			NEW_VAL=`echo "$VAL" | 
							 ascii2uni -a H  2> /dev/null | 
							 ascii2uni -a Q  2> /dev/null |
							 ascii2uni -a U 2> /dev/null | 
							 ascii2uni -a D 2> /dev/null `
			
			
			NEW_VAL=`echo "$NEW_VAL" | 
				
				#.. take out the tildes.
				sed 's/~\([^~]*\)~/\1/g' |
				
				#.. put back character entities 
				sed "s/\&#z38;/\&amp;/g;
						 s/\&#z60;/\&lt;/g;
						 s/\&#z62;/\&gt;/g" 
			`
		
			printf '%s=%s\n' "$NAME" "$NEW_VAL" > $OUT
			
			if [ "$NUMLINES" != "unknown" ]
			then
				PER="$LINENUM / $NUMLINES"
				echo -en "\rProgress: $PER" 1>&2
			fi
		fi
	
		read -r LINE
	done
)
echo 1>&2
exit
