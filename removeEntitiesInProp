#!/bin/bash

########################################################
# removeEntitiesInProp - a BASH script that will take
# a *.properites file and convert all the property 
# values to UTF-8.  This conversion applies to numeric
# entities, named entities and '\u' escaped Unicode 
# characters.
#
# This also cleans up the formatting of the property
# name and value by putting one (and only one) space
# before and after the = symbol separating the two.
#
# Dependencies:
# - ascii2uni/uni2ascii 
#   http://billposer.org/Software/uni2ascii.html
#   (a Windows version is included with the original
#   distribution in the 'win' directory).
#
# This script has been tested under OSX and Microsoft 
# Windows using Cygwin.  It should work using Linux with
# no modifications.  If there are any issues, please
# send a bug report to:
# https://github.com/zoltan-dulac/z4n/issues
#
# Latest version can be grabbed from github at:
# https://github.com/zoltan-dulac/z4n
#
# Author: Zoltan Hawryluk (zoltan.dulac@gmail.com)
#
# Licence: MIT 
# https://opensource.org/licenses/MIT
########################################################

which ascii2uni 2> /dev/null

if [ "$?" != "0" ]
then 
	( echo
	  echo "Cannot find uni2ascii."
	  echo "It can be downloaded at http://billposer.org/Software/uni2ascii.html" 
	  echo ) 1>&2
	exit 1
elif [ "$#" = "0" ]
then
	IN="/dev/stdin"
	OUT="/dev/stdout"
elif [ "$#" = "1" ]
then
	IN="$1"
	OUT="/dev/stdout"
elif [ "$#" = "2" ]
then
	IN="$1"
	OUT="$2"
	
	if [ -f $OUT ]
	then
		rm -i $OUT
	fi
else
	echo "
	
Usage: $0 <input-prop-file> (<optional-output-prop-file>)

This command will take a .properties file as inputa
and remove all the HTML entities.	If the symbols <, &
or > appear, the use will be asked if it should be "entified"
or not

" 1>&2
exit 2

fi

if [ "$IN" != "/dev/null" ]
then
	NUMLINES=`wc -l $IN | awk '{print $1}'`
else
	NUMLINES="unknown"
fi


cat $IN | (
  LINENUM="0"
	read -r LINE 
	while [ "$?" = "0" ]
	do
		LINENUM=`expr $LINENUM + 1`
		
		#.. check for a comment block
		echo $LINE | egrep "^#" > /dev/null
		IS_COMMENT="$?"
		
		#.. check for a blank line
		echo $LINE | egrep "^\s*$" > /dev/null
		IS_BLANK_LINE="$?"
		
		if [ "$IS_COMMENT" = "0" ]
		then
			echo "$LINE" 
		elif [ "$IS_BLANK_LINE" = "0" ]
		then
			echo 
		else
			NAME=`echo $LINE | awk -F"=" '{print $1}'`
			
			# remove space in $NAME
			NAME=`echo $NAME`
		
			#.. idea from http://stackoverflow.com/questions/19154996/awk-split-only-by-first-occurrence
			VAL=`printf '%s\n' "$LINE" | gawk -F"=" '{ st = index($0,"=");print substr($0,st+1)}'`
			
			
			
			
			# trim $NEW_VAL
			NEW_VAL=`echo $VAL`
			
			printf '%s = %s\n' "$NAME" "$NEW_VAL" 
			
			
		fi
		if [ "$NUMLINES" != "unknown" -a "$2" != "" ]
		then
			PER="$LINENUM / $NUMLINES"
			echo -en "\rProgress: $PER" 1>&2
		fi
		read -r LINE
	done
)  | 
				
	#.. we need to ensure \u escaped codes only have four digits, so let's surround them with tildes.
	sed 's/\(\\\u[0-9a-f][0-9a-f][0-9a-f][0-9a-f]\)/~\1~/g' |
		
	#.. we need to ensure &amp;, &gt; and &lt; are *not* converted.
	sed "s/&\(amp\);/\&#z38;/g;
		 s/&\(lt\);/\&#z60;/g;
		 s/&\(gt\);/\&#z62;/g" |
		
	
	
	#.. do the conversion.
	 
	ascii2uni -a H  2> /dev/null | 
	ascii2uni -a Q  2> /dev/null |
	ascii2uni -a U 2> /dev/null | 
	ascii2uni -a D 2> /dev/null |
	
	#.. take out the tildes.
	sed 's/~\([^~]*\)~/\1/g' |
	
	#.. put back character entities 
	sed "s/\&#z38;/\&amp;/g;
			 s/\&#z60;/\&lt;/g;
			 s/\&#z62;/\&gt;/g" >> $OUT


echo 1>&2
exit 0
